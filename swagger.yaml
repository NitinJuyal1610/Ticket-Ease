tags:
- name: auth
  description: auth API
- name: tickets
  description: tickets API
- name: users
  description: users API


paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/agents
  /users/agents:
    get:
      tags:
      - users
      summary: Find All Agents
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'



# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
        - role
    properties:
      email:
        type: string
        description: user Email
        example: nj@gmail.com
      password:
        type: string
        description: user Password
        example: aohifha11389
      role:
        type: string
        description: user Role
        example: admin
        enum: [admin, user, agent]
  
  tickets:
    type: object
    required:
        - title
        - description
        - priority
        - createdBy
        - category
    properties:
      title:
        type: string
        description: ticket title
        example: ticketTitle
      description:
        type: string
        description: ticket description
        example: ticketDescription
      status:
        type: string
        description: ticket status
        default: open
        enum: [open, closed, inProgress]
      priority:
        type: string
        description: ticket priority
        enum: [low, medium, high]
      createdBy:
        type: string
        description: ticket created by
        format: uuid
      category:
        type: string
        description: ticket category
        enum: ['Login/Authentication Issue','UI/UX Feedback','Performance Problem','Broken Links','Error Messages','Compatibility Issue','Missing or Incorrect Data','Feature Malfunction','Spelling or Grammar Mistakes','General Inquiry','Other']
      assignedAgent:
        type: string
        format: uuid
        description: ticket assigned agent
        default: null
      comments:
        type: array
        description: ticket comments
        items:
          type: string
          format: uuid
        default: []
      history:
        type: array
        description: ticket logs
        items:
          type: string
          format: uuid
        default: []
    
  ticketLogs:
    type: object
    required:
      - updateType
      - updateFields
      - userId
    properties:
      updateType:
        type: string
        description: update type
      updateFields:
        type: object
        description: update fields
      userId:
        type: string
        format: uuid
        description: User ID of the log creator
    

  comments:
    type: object
    required:
      - text
    properties:
      text:
        type: string
        description: comment content
        example: this is a demo comment
      author:
        type: string
        format: uuid
        description: User ID of the comment author
    
          

schemes:
 - https
 - http
